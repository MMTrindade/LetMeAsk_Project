{"ast":null,"code":"var _jsxFileName = \"/Users/mtrindade/Documents/Dev_Docs/Projetos/LetMeAsk_Project/src/contexts/AuthContext.tsx\",\n  _s = $RefreshSig$();\nimport { createContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//children faz referencia a elements das routes, que sao elementos do react, aos quais me refiro com ReactNode, que precisa ser importado.\n\n//Implementando contexto -> string valor inicial\nexport const AuthContext = /*#__PURE__*/createContext({});\nexport function AuthContextProvider(props) {\n  _s();\n  const [user, setUser] = useState();\n\n  //Caso onAuthStateChanged, em contato com firebase, detectar que usuario havia logado anteriormente, vai manter o nome do usuario logado mediante a atualizacao da pagina\n  //Boa pratica: Toda vez que se declara um eventlistener no React e recomendado que se use uma variavel, e tambem criar um retorno que te descadastre de todos os event listeners usado\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (user) {\n        //Se foi resultado um usuario dessa autenticacao, then..\n        const {\n          displayName,\n          photoURL,\n          uid\n        } = user;\n\n        //Se o user nao tenha nome ou foto, a aplicacao nao vai funcionar\n        if (!displayName || !photoURL) {\n          throw new Error('Missing information from Google Account.');\n        }\n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        });\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, []); //Primerio qual funcao eu quero executar, segundo quando <Array> que eu quero executar essa funcao, qual parametro que vai mudar e ser trigger para disparar a funcao, se eu deixar o array vazio, ela dispara uma unica vez\n\n  async function signInWithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    const result = await auth.signInWithPopup(provider);\n    //signInwithPopup: Fazer autenticação direto com Poupup na tela, ao inves de redirecionar o cliente.\n\n    if (result.user) {\n      //Se foi resultado um usuario dessa autenticacao, then..\n      const {\n        displayName,\n        photoURL,\n        uid\n      } = result.user;\n\n      //Se o user nao tenha nome ou foto, a aplicacao nao vai funcionar\n      if (!displayName || !photoURL) {\n        throw new Error('Missing information from Google Account.');\n      }\n      setUser({\n        id: uid,\n        name: displayName,\n        avatar: photoURL\n      });\n    }\n  }\n\n  //Jogando signInWithGoogle a AuthContext, leva a autenticacao a todas as paginas --gracas a API de contexto!!!\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      signInWithGoogle\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n_s(AuthContextProvider, \"hT6C72rcbfRUedrDq+TPaFfRI/M=\");\n_c = AuthContextProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthContextProvider\");","map":{"version":3,"names":["createContext","AuthContext","AuthContextProvider","props","user","setUser","useState","useEffect","unsubscribe","auth","onAuthStateChanged","displayName","photoURL","uid","Error","id","name","avatar","signInWithGoogle","provider","firebase","GoogleAuthProvider","result","signInWithPopup","children"],"sources":["/Users/mtrindade/Documents/Dev_Docs/Projetos/LetMeAsk_Project/src/contexts/AuthContext.tsx"],"sourcesContent":["import { createContext, ReactNode } from \"react\";\n\n\n\ntype User = {\n    id: string;\n    name: string;\n    avatar: string;\n  }\n  \ntype AuthContextType = {\n    user: User | undefined; //No primeiro momento nao existe usuario logado, logo ele e undefined!\n    signInWithGoogle: () => Promise <void>; //Toda funcao assincrona retorna uma promessa e void - Funcao que nao tem parametros no () e tambem nao tem return dentro dela \n  }\n  \ntype AuthContextProviderProps = {\n    children: ReactNode;\n}\n//children faz referencia a elements das routes, que sao elementos do react, aos quais me refiro com ReactNode, que precisa ser importado.\n\n//Implementando contexto -> string valor inicial\nexport const AuthContext = createContext({} as AuthContextType);\n\nexport function AuthContextProvider(props : AuthContextProviderProps) {\n\n    const [user, setUser] =  useState<User>();\n\n    //Caso onAuthStateChanged, em contato com firebase, detectar que usuario havia logado anteriormente, vai manter o nome do usuario logado mediante a atualizacao da pagina\n    //Boa pratica: Toda vez que se declara um eventlistener no React e recomendado que se use uma variavel, e tambem criar um retorno que te descadastre de todos os event listeners usado\n    \n    useEffect(() => {\n      const unsubscribe = auth.onAuthStateChanged(user => {\n        if (user) { //Se foi resultado um usuario dessa autenticacao, then..\n          const {displayName, photoURL, uid} = user\n  \n          //Se o user nao tenha nome ou foto, a aplicacao nao vai funcionar\n          if (!displayName || !photoURL) {\n            throw new Error('Missing information from Google Account.');\n            }\n  \n            setUser({\n              id: uid,\n              name: displayName,\n              avatar:photoURL\n            })\n        }\n      })\n  \n      return () => {\n        unsubscribe();\n      }\n  \n    }, []) //Primerio qual funcao eu quero executar, segundo quando <Array> que eu quero executar essa funcao, qual parametro que vai mudar e ser trigger para disparar a funcao, se eu deixar o array vazio, ela dispara uma unica vez\n  \n    async function signInWithGoogle() {\n      const provider = new firebase.auth.GoogleAuthProvider();\n      \n      const result = await auth.signInWithPopup(provider);\n      //signInwithPopup: Fazer autenticação direto com Poupup na tela, ao inves de redirecionar o cliente.\n      \n      if (result.user) { //Se foi resultado um usuario dessa autenticacao, then..\n        const {displayName, photoURL, uid} = result.user\n  \n        //Se o user nao tenha nome ou foto, a aplicacao nao vai funcionar\n        if (!displayName || !photoURL) {\n          throw new Error('Missing information from Google Account.');\n          }\n  \n          setUser({\n            id: uid,\n            name: displayName,\n            avatar:photoURL\n          })\n        }\n            \n    }\n  \n    //Jogando signInWithGoogle a AuthContext, leva a autenticacao a todas as paginas --gracas a API de contexto!!!\n    return (\n        <AuthContext.Provider value={{ user, signInWithGoogle}}> \n            {props.children}\n        </AuthContext.Provider>\n    )\n}"],"mappings":";;AAAA,SAASA,aAAa,QAAmB,OAAO;AAAC;AAkBjD;;AAEA;AACA,OAAO,MAAMC,WAAW,gBAAGD,aAAa,CAAC,CAAC,CAAC,CAAoB;AAE/D,OAAO,SAASE,mBAAmB,CAACC,KAAgC,EAAE;EAAA;EAElE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAIC,QAAQ,EAAQ;;EAEzC;EACA;;EAEAC,SAAS,CAAC,MAAM;IACd,MAAMC,WAAW,GAAGC,IAAI,CAACC,kBAAkB,CAACN,IAAI,IAAI;MAClD,IAAIA,IAAI,EAAE;QAAE;QACV,MAAM;UAACO,WAAW;UAAEC,QAAQ;UAAEC;QAAG,CAAC,GAAGT,IAAI;;QAEzC;QACA,IAAI,CAACO,WAAW,IAAI,CAACC,QAAQ,EAAE;UAC7B,MAAM,IAAIE,KAAK,CAAC,0CAA0C,CAAC;QAC3D;QAEAT,OAAO,CAAC;UACNU,EAAE,EAAEF,GAAG;UACPG,IAAI,EAAEL,WAAW;UACjBM,MAAM,EAACL;QACT,CAAC,CAAC;MACN;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACXJ,WAAW,EAAE;IACf,CAAC;EAEH,CAAC,EAAE,EAAE,CAAC,EAAC;;EAEP,eAAeU,gBAAgB,GAAG;IAChC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAACX,IAAI,CAACY,kBAAkB,EAAE;IAEvD,MAAMC,MAAM,GAAG,MAAMb,IAAI,CAACc,eAAe,CAACJ,QAAQ,CAAC;IACnD;;IAEA,IAAIG,MAAM,CAAClB,IAAI,EAAE;MAAE;MACjB,MAAM;QAACO,WAAW;QAAEC,QAAQ;QAAEC;MAAG,CAAC,GAAGS,MAAM,CAAClB,IAAI;;MAEhD;MACA,IAAI,CAACO,WAAW,IAAI,CAACC,QAAQ,EAAE;QAC7B,MAAM,IAAIE,KAAK,CAAC,0CAA0C,CAAC;MAC3D;MAEAT,OAAO,CAAC;QACNU,EAAE,EAAEF,GAAG;QACPG,IAAI,EAAEL,WAAW;QACjBM,MAAM,EAACL;MACT,CAAC,CAAC;IACJ;EAEJ;;EAEA;EACA,oBACI,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAE;MAAER,IAAI;MAAEc;IAAgB,CAAE;IAAA,UAClDf,KAAK,CAACqB;EAAQ;IAAA;IAAA;IAAA;EAAA,QACI;AAE/B;AAAC,GA5DetB,mBAAmB;AAAA,KAAnBA,mBAAmB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}