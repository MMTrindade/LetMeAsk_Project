{"ast":null,"code":"var _jsxFileName = \"/Users/mtrindade/Documents/Dev_Docs/Projetos/LetMeAsk_Project/src/pages/Room.tsx\",\n  _s = $RefreshSig$();\nimport { useParams } from \"react-router-dom\";\nimport { Button } from \"../components/Button\";\nimport logoImg from \"../assets/images/logo.svg\";\nimport { useEffect, useState } from \"react\";\nimport { useAuth } from \"../hooks/useAuth\";\nimport { database } from \"../services/firebase\";\n\n//Para declarar tipagem de objetos no TS uso Record<tipo da chave, tipo do valor - que nesse caso e outro objeto>\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//Os parametros da minha pagina ficarao armazenados em params, quero manter o codigo da pagina.\nexport function Room() {\n  _s();\n  const user = useAuth();\n  const params = useParams(); //Generics: Para que a funcao saiba quais os parametros que a rota params vai receber\n  const roomId = params.id;\n  const [newQuestion, setNewQuestion] = useState('');\n  const [questions, setQuestions] = useState([]);\n  const [title, setTitle] = useState('');\n\n  //useEffect, dispara um evento sempre que alguma informacao mudar\n  useEffect(() => {\n    const roomRef = database.ref(`rooms/${roomId}`);\n\n    //Seguindo a documentacao do Firebase, digo ao Firebase que estou ouvindo um evento faz-se:\n    //.val e uma API do Firebase para buscar os valores que estao dentro da room\n    //roomRef.on -> toda vez que roomId mudar, ele vai executar o codigo abaixo novamente, e substituir as informacoes em tela\n    roomRef.on('value', room => {\n      var _databaseRoom$questio;\n      const databaseRoom = room.val();\n      const firebaseQuestions = (_databaseRoom$questio = databaseRoom.questions) !== null && _databaseRoom$questio !== void 0 ? _databaseRoom$questio : {};\n\n      //Implementando um \"Hashmap\". Object. entries em um objeto retorna um array com cada posicao contendo ckey e value de um onjeto.\n      const parsedQuestions = Object.entries(firebaseQuestions).map(_ref => {\n        let [key, value] = _ref;\n        return {\n          id: key,\n          content: value.content,\n          author: value.author,\n          isHighLighted: value.isHighlighted,\n          inAnswered: value.isAnswered\n        };\n      });\n      setTitle(databaseRoom.title);\n      setQuestions(parsedQuestions);\n    });\n  }, [roomId]);\n  async function handleSendQuestion(event) {\n    event.preventDefault();\n    //preventDeafault garante que o site nao ira recarregar a tela desnecessariamente\n    if (newQuestion.trim() === '') {\n      return;\n    }\n    if (!user) {\n      throw new Error('You must be logged in');\n    }\n    const question = {\n      content: newQuestion,\n      author: {\n        name: user.name,\n        avatar: user.avatar\n      },\n      isHighLighted: false,\n      isAnswered: false\n    };\n\n    //Na database tenho authorID e title contendo informacoes da sala. Com /questions, crio mais um elemento, e faco push da const question criada acima\n    await database.ref(`rooms/${roomId}/questions`).push(question);\n    setNewQuestion(''); //Apos o envio da pergunta, modifico o estado do newQuestion na area de texto para vazio pois a pergunta ja foi enviada.\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"page-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: logoImg,\n          alt: \"Letmeask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Sala \", title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), questions.length > 0 &&\n        /*#__PURE__*/\n        /*if condicao && signigfica then consequencia*/\n        _jsxDEV(\"span\", {\n          children: [questions.length, \" pergunta(s)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSendQuestion,\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"O que voc\\xEA quer perguntar?\",\n          onChange: event => setNewQuestion(event.target.value),\n          value: newQuestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-footer\",\n          children: [user ?\n          /*#__PURE__*/\n          /* if ->? condicao else -> : consequencia*/\n          _jsxDEV(\"div\", {\n            className: \"user-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: user.avatar,\n              alt: user.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: user.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Para enviar uma pergunta, \", /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"fa\\xE7a seu login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 57\n            }, this), \".\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            disabled: !user,\n            children: \"Enviar pergunta \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), JSON.stringify(questions)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n}\n\n//Improvement opportunity: Value updates the whole list whenever one single information is changed. If the page has 1000 questions, for example, it can make the platform slow. Check on /child added/child changed/ on firebase.\n_s(Room, \"jhtANmEFiUEJo/rB4KTL/oi6djc=\", false, function () {\n  return [useAuth, useParams];\n});\n_c = Room;\nvar _c;\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"names":["useParams","Button","logoImg","useEffect","useState","useAuth","database","Room","user","params","roomId","id","newQuestion","setNewQuestion","questions","setQuestions","title","setTitle","roomRef","ref","on","room","databaseRoom","val","firebaseQuestions","parsedQuestions","Object","entries","map","key","value","content","author","isHighLighted","isHighlighted","inAnswered","isAnswered","handleSendQuestion","event","preventDefault","trim","Error","question","name","avatar","push","length","target","JSON","stringify"],"sources":["/Users/mtrindade/Documents/Dev_Docs/Projetos/LetMeAsk_Project/src/pages/Room.tsx"],"sourcesContent":["import { useParams } from \"react-router-dom\";\nimport { Button } from \"../components/Button\";\nimport  logoImg  from \"../assets/images/logo.svg\";\nimport {RoomCode} from '../components/RoomCode'\nimport { FormEvent, useEffect, useState } from \"react\";\nimport { useAuth } from \"../hooks/useAuth\";\nimport { database } from \"../services/firebase\";\n\n//Para declarar tipagem de objetos no TS uso Record<tipo da chave, tipo do valor - que nesse caso e outro objeto>\ntype FirebaseQuestions = Record<string, {\n    author: {\n        name: string;\n        avatar: string;\n    }\n    content: string; \n    isAnswered: boolean;\n    isHighlighted: boolean;\n}>\n\ntype RoomParams = {\n    id: string;\n}\n\ntype Question = {\n    id:string;\n    author: {\n        name: string;\n        avatar: string;\n    }\n    content: string; \n    isAnswered: boolean;\n    isHighlighted: boolean;\n}\n\n//Os parametros da minha pagina ficarao armazenados em params, quero manter o codigo da pagina.\nexport function Room(){ \n    const user = useAuth();\n    const params = useParams<RoomParams>(); //Generics: Para que a funcao saiba quais os parametros que a rota params vai receber\n    const roomId = params.id;\n    const [newQuestion, setNewQuestion] = useState('');\n    const [questions, setQuestions] = useState<Question[]>([])\n    const [title, setTitle] = useState('');\n\n\n    //useEffect, dispara um evento sempre que alguma informacao mudar\n    useEffect(() => {\n        const roomRef = database.ref(`rooms/${roomId}`);\n        \n        //Seguindo a documentacao do Firebase, digo ao Firebase que estou ouvindo um evento faz-se:\n        //.val e uma API do Firebase para buscar os valores que estao dentro da room\n        //roomRef.on -> toda vez que roomId mudar, ele vai executar o codigo abaixo novamente, e substituir as informacoes em tela\n        roomRef.on('value', room => {\n            const databaseRoom = room.val();\n            const firebaseQuestions: FirebaseQuestions = databaseRoom.questions ?? {};\n            \n            //Implementando um \"Hashmap\". Object. entries em um objeto retorna um array com cada posicao contendo ckey e value de um onjeto.\n            const parsedQuestions= Object.entries(firebaseQuestions).map(([key, value]) => {\n                return {\n                    id: key,\n                    content: value.content,\n                    author: value.author,\n                    isHighLighted: value.isHighlighted,\n                    inAnswered: value.isAnswered,\n                }\n            })\n\n            setTitle(databaseRoom.title);\n            setQuestions(parsedQuestions)\n            \n        })\n    }, [roomId]);\n\n\n    async function handleSendQuestion(event: FormEvent) {\n        event.preventDefault();\n//preventDeafault garante que o site nao ira recarregar a tela desnecessariamente\n        if (newQuestion.trim() === '') {\n            return;\n        }\n    \n        if (!user) {\n            throw new Error('You must be logged in');\n        }\n\n        const question = {\n            content: newQuestion,\n            author: {\n                name: user.name,\n                avatar: user.avatar,\n            },\n            isHighLighted:false,\n            isAnswered: false,\n        };\n\n//Na database tenho authorID e title contendo informacoes da sala. Com /questions, crio mais um elemento, e faco push da const question criada acima\n        await database.ref(`rooms/${roomId}/questions`).push(question);\n    \n        setNewQuestion('');//Apos o envio da pergunta, modifico o estado do newQuestion na area de texto para vazio pois a pergunta ja foi enviada.\n    }\n\n    return(\n        <div id='page-room'>\n            <header>\n                <div className='content'>\n                    <img src={logoImg} alt='Letmeask'/>\n                    {/*<RoomCode code={params.id}/> disponibiliza o codigo no header da sala, mas esta dando erro*/} \n                </div>\n            </header>\n\n            \n            <main className='content'>\n                <div className='room-title'>\n                    <h1>Sala {title}</h1> \n                    {questions.length > 0 && /*if condicao && signigfica then consequencia*/\n                    <span>{questions.length} pergunta(s)</span>}\n                </div>\n{/*Pega o valor do input conforme ele e digitado*/}\n                <form onSubmit={handleSendQuestion}>\n                    <textarea placeholder='O que você quer perguntar?'\n                    onChange={event => setNewQuestion(event.target.value)}\n                    value={newQuestion}\n                />\n\n                <div className='form-footer'>\n                    { user ? ( /* if ->? condicao else -> : consequencia*/\n                        <div className=\"user-info\">\n                            <img src={user.avatar} alt={user.name} />\n                            <span>{user.name}</span>\n                        </div>\n                    ) : (\n                        <span>Para enviar uma pergunta, <button>faça seu login</button>.</span>\n                    )}\n                    \n                    <Button type='submit' disabled={!user}>Enviar pergunta </Button>\n                </div>\n                </form>\n\n                {JSON.stringify(questions)}\n            </main>\n        </div>\n\n    );\n}\n\n//Improvement opportunity: Value updates the whole list whenever one single information is changed. If the page has 1000 questions, for example, it can make the platform slow. Check on /child added/child changed/ on firebase."],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}