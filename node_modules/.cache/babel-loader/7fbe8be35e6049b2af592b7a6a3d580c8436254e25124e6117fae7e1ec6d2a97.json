{"ast":null,"code":"var _jsxFileName = \"/Users/mtrindade/Documents/Dev_Docs/Projetos/LetMeAsk_Project/src/App.tsx\",\n  _s = $RefreshSig$();\n//Autoimort: Identifica a importação do componente Home e faz de forma automática\n//contexto permite features como autenticação funcionarem em todas as páginas sem precisar repetir o código\n//useEffect e um hook para disparo de efeitos colaterais, quando quero disparar uma funcao sempre que algo acontecer, ex: uma informacao mudou.\nimport { useState, useEffect } from 'react';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport { Home } from \"./pages/Home\";\nimport { NewRoom } from \"./pages/NewRoom\";\n//Importo firebase para implementar autenticação com google.\nimport { auth, firebase } from './services/firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [user, setUser] = useState();\n\n  //Caso onAuthStateChanged, em contato com firebase, detectar que usuario havia logado anteriormente, vai manter o nome do usuario logado mediante a atualizacao da pagina\n  //Boa pratica: Toda vez que se declara um eventlistener no React e recomendado que se use uma variavel, e tambem criar um retorno que te descadastre de todos os event listeners usado\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (user) {\n        //Se foi resultado um usuario dessa autenticacao, then..\n        const {\n          displayName,\n          photoURL,\n          uid\n        } = user;\n\n        //Se o user nao tenha nome ou foto, a aplicacao nao vai funcionar\n        if (!displayName || !photoURL) {\n          throw new Error('Missing information from Google Account.');\n        }\n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        });\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, []); //Primerio qual funcao eu quero executar, segundo quando <Array> que eu quero executar essa funcao, qual parametro que vai mudar e ser trigger para disparar a funcao, se eu deixar o array vazio, ela dispara uma unica vez\n\n  async function signInWithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    const result = await auth.signInWithPopup(provider);\n    //signInwithPopup: Fazer autenticação direto com Poupup na tela, ao inves de redirecionar o cliente.\n\n    if (result.user) {\n      //Se foi resultado um usuario dessa autenticacao, then..\n      const {\n        displayName,\n        photoURL,\n        uid\n      } = result.user;\n\n      //Se o user nao tenha nome ou foto, a aplicacao nao vai funcionar\n      if (!displayName || !photoURL) {\n        throw new Error('Missing information from Google Account.');\n      }\n      setUser({\n        id: uid,\n        name: displayName,\n        avatar: photoURL\n      });\n    }\n  }\n\n  //Jogando signInWithGoogle a AuthContext, leva a autenticacao a todas as paginas --gracas a API de contexto!!!\n\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 36\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/rooms/new\",\n        element: /*#__PURE__*/_jsxDEV(NewRoom, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 45\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 7\n  }, this);\n}\n//Desta forma tudo que estiver dentro do provider vai conseguir enxergar o valor do contexto\n//Obs: Exact (valor true) diz que o endereço precisa ser exatamente \"/\", para que nao haja ruidos com outros enderecos comecando por \"/\", ou serao mostradas todas a paginas com / de uma so vez\n_s(App, \"hT6C72rcbfRUedrDq+TPaFfRI/M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","BrowserRouter","Route","Routes","Home","NewRoom","auth","firebase","App","user","setUser","unsubscribe","onAuthStateChanged","displayName","photoURL","uid","Error","id","name","avatar","signInWithGoogle","provider","GoogleAuthProvider","result","signInWithPopup"],"sources":["/Users/mtrindade/Documents/Dev_Docs/Projetos/LetMeAsk_Project/src/App.tsx"],"sourcesContent":["//Autoimort: Identifica a importação do componente Home e faz de forma automática\n//contexto permite features como autenticação funcionarem em todas as páginas sem precisar repetir o código\n//useEffect e um hook para disparo de efeitos colaterais, quando quero disparar uma funcao sempre que algo acontecer, ex: uma informacao mudou.\nimport {createContext, useState, useEffect} from 'react'\nimport { BrowserRouter, Route, Routes, RouteProps } from 'react-router-dom';\nimport { Home } from \"./pages/Home\";\nimport { NewRoom } from \"./pages/NewRoom\";\n//Importo firebase para implementar autenticação com google.\nimport { auth, firebase } from './services/firebase'\n\nimport {AuthContextProvider} from '../App';\n\nfunction App() {\n\n  const [user, setUser] =  useState<User>();\n\n  //Caso onAuthStateChanged, em contato com firebase, detectar que usuario havia logado anteriormente, vai manter o nome do usuario logado mediante a atualizacao da pagina\n  //Boa pratica: Toda vez que se declara um eventlistener no React e recomendado que se use uma variavel, e tambem criar um retorno que te descadastre de todos os event listeners usado\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (user) { //Se foi resultado um usuario dessa autenticacao, then..\n        const {displayName, photoURL, uid} = user\n\n        //Se o user nao tenha nome ou foto, a aplicacao nao vai funcionar\n        if (!displayName || !photoURL) {\n          throw new Error('Missing information from Google Account.');\n          }\n\n          setUser({\n            id: uid,\n            name: displayName,\n            avatar:photoURL\n          })\n      }\n    })\n\n    return () => {\n      unsubscribe();\n    }\n\n  }, []) //Primerio qual funcao eu quero executar, segundo quando <Array> que eu quero executar essa funcao, qual parametro que vai mudar e ser trigger para disparar a funcao, se eu deixar o array vazio, ela dispara uma unica vez\n\n  async function signInWithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    \n    const result = await auth.signInWithPopup(provider);\n    //signInwithPopup: Fazer autenticação direto com Poupup na tela, ao inves de redirecionar o cliente.\n    \n    if (result.user) { //Se foi resultado um usuario dessa autenticacao, then..\n      const {displayName, photoURL, uid} = result.user\n\n      //Se o user nao tenha nome ou foto, a aplicacao nao vai funcionar\n      if (!displayName || !photoURL) {\n        throw new Error('Missing information from Google Account.');\n        }\n\n        setUser({\n          id: uid,\n          name: displayName,\n          avatar:photoURL\n        })\n      }\n          \n  }\n\n  //Jogando signInWithGoogle a AuthContext, leva a autenticacao a todas as paginas --gracas a API de contexto!!!\n\n    return (\n      <BrowserRouter> \n        <Routes>\n          <Route path=\"/\" element={<Home/>} /> \n          <Route path=\"/rooms/new\" element={<NewRoom/>} />\n        </Routes>\n      </BrowserRouter>\n    );\n}\n  //Desta forma tudo que estiver dentro do provider vai conseguir enxergar o valor do contexto\n  //Obs: Exact (valor true) diz que o endereço precisa ser exatamente \"/\", para que nao haja ruidos com outros enderecos comecando por \"/\", ou serao mostradas todas a paginas com / de uma so vez\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA,SAAuBA,QAAQ,EAAEC,SAAS,QAAO,OAAO;AACxD,SAASC,aAAa,EAAEC,KAAK,EAAEC,MAAM,QAAoB,kBAAkB;AAC3E,SAASC,IAAI,QAAQ,cAAc;AACnC,SAASC,OAAO,QAAQ,iBAAiB;AACzC;AACA,SAASC,IAAI,EAAEC,QAAQ,QAAQ,qBAAqB;AAAA;AAIpD,SAASC,GAAG,GAAG;EAAA;EAEb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAIX,QAAQ,EAAQ;;EAEzC;EACA;EACAC,SAAS,CAAC,MAAM;IACd,MAAMW,WAAW,GAAGL,IAAI,CAACM,kBAAkB,CAACH,IAAI,IAAI;MAClD,IAAIA,IAAI,EAAE;QAAE;QACV,MAAM;UAACI,WAAW;UAAEC,QAAQ;UAAEC;QAAG,CAAC,GAAGN,IAAI;;QAEzC;QACA,IAAI,CAACI,WAAW,IAAI,CAACC,QAAQ,EAAE;UAC7B,MAAM,IAAIE,KAAK,CAAC,0CAA0C,CAAC;QAC3D;QAEAN,OAAO,CAAC;UACNO,EAAE,EAAEF,GAAG;UACPG,IAAI,EAAEL,WAAW;UACjBM,MAAM,EAACL;QACT,CAAC,CAAC;MACN;IACF,CAAC,CAAC;IAEF,OAAO,MAAM;MACXH,WAAW,EAAE;IACf,CAAC;EAEH,CAAC,EAAE,EAAE,CAAC,EAAC;;EAEP,eAAeS,gBAAgB,GAAG;IAChC,MAAMC,QAAQ,GAAG,IAAId,QAAQ,CAACD,IAAI,CAACgB,kBAAkB,EAAE;IAEvD,MAAMC,MAAM,GAAG,MAAMjB,IAAI,CAACkB,eAAe,CAACH,QAAQ,CAAC;IACnD;;IAEA,IAAIE,MAAM,CAACd,IAAI,EAAE;MAAE;MACjB,MAAM;QAACI,WAAW;QAAEC,QAAQ;QAAEC;MAAG,CAAC,GAAGQ,MAAM,CAACd,IAAI;;MAEhD;MACA,IAAI,CAACI,WAAW,IAAI,CAACC,QAAQ,EAAE;QAC7B,MAAM,IAAIE,KAAK,CAAC,0CAA0C,CAAC;MAC3D;MAEAN,OAAO,CAAC;QACNO,EAAE,EAAEF,GAAG;QACPG,IAAI,EAAEL,WAAW;QACjBM,MAAM,EAACL;MACT,CAAC,CAAC;IACJ;EAEJ;;EAEA;;EAEE,oBACE,QAAC,aAAa;IAAA,uBACZ,QAAC,MAAM;MAAA,wBACL,QAAC,KAAK;QAAC,IAAI,EAAC,GAAG;QAAC,OAAO,eAAE,QAAC,IAAI;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA,QAAG,eACpC,QAAC,KAAK;QAAC,IAAI,EAAC,YAAY;QAAC,OAAO,eAAE,QAAC,OAAO;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA,QAAG;IAAA;MAAA;MAAA;MAAA;IAAA;EACzC;IAAA;IAAA;IAAA;EAAA,QACK;AAEtB;AACE;AACA;AAAA,GAjEON,GAAG;AAAA,KAAHA,GAAG;AAmEZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}