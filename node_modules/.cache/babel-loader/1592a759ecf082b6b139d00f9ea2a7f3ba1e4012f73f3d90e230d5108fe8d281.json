{"ast":null,"code":"var _jsxFileName = \"/Users/mtrindade/Documents/Dev_Docs/Projetos/LetMeAsk_Project/src/pages/AdminRoom.tsx\",\n  _s = $RefreshSig$();\nimport { useNavigate, useParams } from 'react-router-dom';\nimport logoImg from '../assets/images/logo.svg';\nimport deleteImg from '../assets/images/delete.svg';\nimport { Button } from '../components/Button';\nimport { Question } from '../components/Questions/Question';\n// import { useAuth } from '../hooks/useAuth';\nimport { useRoom } from '../hooks/useRoom';\nimport { database } from '../services/firebase';\nimport '../styles/room.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function AdminRoom() {\n  _s();\n  // const { user } = useAuth();\n  const navigate = useNavigate();\n  const params = useParams();\n  const roomId = params.id;\n  const {\n    title,\n    questions\n  } = useRoom(roomId);\n\n  //update altera os dados da sala. endedAt: new Date() encerra a sala.\n  async function handleEndRoom() {\n    await database.ref(`rooms/${roomId}`).update({\n      endedAt: new Date()\n    });\n    //Apos encerrar a sala ele redireciona para Home.\n    navigate('/');\n  }\n  //Funcionalidade para o admin deletar perguntas pela pagina de acesso admin.\n  async function handleDeleteQuestion(questionId) {\n    //Confirm do Javascript - Retorna um boolean\n    if (window.confirm('Tem certeza que você deseja excluir esta pergunta?')) {\n      await database.ref(`rooms/${roomId}/questions/${questionId}`).remove();\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"page-room\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logoImg,\n          alt: \"Letmeask\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            isOutlined: true,\n            onClick: handleEndRoom,\n            children: \"Encerrar sala\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"Sala \", title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), questions.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [questions.length, \" pergunta(s)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-list\",\n        children: questions.map(question => {\n          return /*#__PURE__*/_jsxDEV(Question, {\n            content: question.content,\n            author: question.author,\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => handleDeleteQuestion(question.id),\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: deleteImg,\n                alt: \"Remover pergunta\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 17\n            }, this)\n          }, question.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminRoom, \"mkr8yXOpJxTLVXhjzZfvbZXi9O4=\", false, function () {\n  return [useNavigate, useParams, useRoom];\n});\n_c = AdminRoom;\nvar _c;\n$RefreshReg$(_c, \"AdminRoom\");","map":{"version":3,"names":["useNavigate","useParams","logoImg","deleteImg","Button","Question","useRoom","database","AdminRoom","navigate","params","roomId","id","title","questions","handleEndRoom","ref","update","endedAt","Date","handleDeleteQuestion","questionId","window","confirm","remove","length","map","question","content","author"],"sources":["/Users/mtrindade/Documents/Dev_Docs/Projetos/LetMeAsk_Project/src/pages/AdminRoom.tsx"],"sourcesContent":["import { useNavigate, useParams } from 'react-router-dom'\n\nimport logoImg from '../assets/images/logo.svg';\nimport deleteImg from '../assets/images/delete.svg';\n\nimport { Button } from '../components/Button';\nimport { Question } from '../components/Questions/Question';\nimport { RoomCode } from '../components/RoomCode';\n// import { useAuth } from '../hooks/useAuth';\nimport { useRoom } from '../hooks/useRoom';\nimport { database } from '../services/firebase';\n\nimport '../styles/room.scss';\n\ntype RoomParams = {\n  id: string;\n}\n\nexport function AdminRoom() {\n  // const { user } = useAuth();\n  const navigate = useNavigate()\n  const params = useParams<RoomParams>();\n  const roomId = params.id;\n\n  const { title, questions } = useRoom(roomId)\n\n  //update altera os dados da sala. endedAt: new Date() encerra a sala.\n  async function handleEndRoom() {\n    await database.ref(`rooms/${roomId}`).update({\n      endedAt: new Date(),\n    })\n    //Apos encerrar a sala ele redireciona para Home.\n    navigate('/');\n  }\n  //Funcionalidade para o admin deletar perguntas pela pagina de acesso admin.\n  async function handleDeleteQuestion(questionId: string) {\n    //Confirm do Javascript - Retorna um boolean\n    if (window.confirm('Tem certeza que você deseja excluir esta pergunta?')) {\n      await database.ref(`rooms/${roomId}/questions/${questionId}`).remove();\n    }\n  }\n\n  return (\n    <div id=\"page-room\">\n      <header>\n        <div className=\"content\">\n          <img src={logoImg} alt=\"Letmeask\" />\n          <div>\n            {/*<RoomCode code={roomId} />*/}\n            <Button isOutlined onClick={handleEndRoom}>Encerrar sala</Button>\n          </div>\n        </div>\n      </header>\n\n      <main>\n        <div className=\"room-title\">\n          <h1>Sala {title}</h1>\n          { questions.length > 0 && <span>{questions.length} pergunta(s)</span> }\n        </div>\n\n        <div className=\"question-list\">\n          {questions.map(question => {\n            return (\n              <Question\n                key={question.id}\n                content={question.content}\n                author={question.author}\n              >\n                <button\n                  type=\"button\"\n                  onClick={() => handleDeleteQuestion(question.id)}\n                >\n                  <img src={deleteImg} alt=\"Remover pergunta\" />\n                </button>\n              </Question>\n            );\n          })}\n        </div>\n      </main>\n    </div>\n  );\n}"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AAEzD,OAAOC,OAAO,MAAM,2BAA2B;AAC/C,OAAOC,SAAS,MAAM,6BAA6B;AAEnD,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,SAASC,QAAQ,QAAQ,kCAAkC;AAE3D;AACA,SAASC,OAAO,QAAQ,kBAAkB;AAC1C,SAASC,QAAQ,QAAQ,sBAAsB;AAE/C,OAAO,qBAAqB;AAAC;AAM7B,OAAO,SAASC,SAAS,GAAG;EAAA;EAC1B;EACA,MAAMC,QAAQ,GAAGT,WAAW,EAAE;EAC9B,MAAMU,MAAM,GAAGT,SAAS,EAAc;EACtC,MAAMU,MAAM,GAAGD,MAAM,CAACE,EAAE;EAExB,MAAM;IAAEC,KAAK;IAAEC;EAAU,CAAC,GAAGR,OAAO,CAACK,MAAM,CAAC;;EAE5C;EACA,eAAeI,aAAa,GAAG;IAC7B,MAAMR,QAAQ,CAACS,GAAG,CAAE,SAAQL,MAAO,EAAC,CAAC,CAACM,MAAM,CAAC;MAC3CC,OAAO,EAAE,IAAIC,IAAI;IACnB,CAAC,CAAC;IACF;IACAV,QAAQ,CAAC,GAAG,CAAC;EACf;EACA;EACA,eAAeW,oBAAoB,CAACC,UAAkB,EAAE;IACtD;IACA,IAAIC,MAAM,CAACC,OAAO,CAAC,oDAAoD,CAAC,EAAE;MACxE,MAAMhB,QAAQ,CAACS,GAAG,CAAE,SAAQL,MAAO,cAAaU,UAAW,EAAC,CAAC,CAACG,MAAM,EAAE;IACxE;EACF;EAEA,oBACE;IAAK,EAAE,EAAC,WAAW;IAAA,wBACjB;MAAA,uBACE;QAAK,SAAS,EAAC,SAAS;QAAA,wBACtB;UAAK,GAAG,EAAEtB,OAAQ;UAAC,GAAG,EAAC;QAAU;UAAA;UAAA;UAAA;QAAA,QAAG,eACpC;UAAA,uBAEE,QAAC,MAAM;YAAC,UAAU;YAAC,OAAO,EAAEa,aAAc;YAAA,UAAC;UAAa;YAAA;YAAA;YAAA;UAAA;QAAS;UAAA;UAAA;UAAA;QAAA,QAC7D;MAAA;QAAA;QAAA;QAAA;MAAA;IACF;MAAA;MAAA;MAAA;IAAA,QACC,eAET;MAAA,wBACE;QAAK,SAAS,EAAC,YAAY;QAAA,wBACzB;UAAA,WAAI,OAAK,EAACF,KAAK;QAAA;UAAA;UAAA;UAAA;QAAA,QAAM,EACnBC,SAAS,CAACW,MAAM,GAAG,CAAC,iBAAI;UAAA,WAAOX,SAAS,CAACW,MAAM,EAAC,cAAY;QAAA;UAAA;UAAA;UAAA;QAAA,QAAO;MAAA;QAAA;QAAA;QAAA;MAAA,QACjE,eAEN;QAAK,SAAS,EAAC,eAAe;QAAA,UAC3BX,SAAS,CAACY,GAAG,CAACC,QAAQ,IAAI;UACzB,oBACE,QAAC,QAAQ;YAEP,OAAO,EAAEA,QAAQ,CAACC,OAAQ;YAC1B,MAAM,EAAED,QAAQ,CAACE,MAAO;YAAA,uBAExB;cACE,IAAI,EAAC,QAAQ;cACb,OAAO,EAAE,MAAMT,oBAAoB,CAACO,QAAQ,CAACf,EAAE,CAAE;cAAA,uBAEjD;gBAAK,GAAG,EAAET,SAAU;gBAAC,GAAG,EAAC;cAAkB;gBAAA;gBAAA;gBAAA;cAAA;YAAG;cAAA;cAAA;cAAA;YAAA;UACvC,GATJwB,QAAQ,CAACf,EAAE;YAAA;YAAA;YAAA;UAAA,QAUP;QAEf,CAAC;MAAC;QAAA;QAAA;QAAA;MAAA,QACE;IAAA;MAAA;MAAA;MAAA;IAAA,QACD;EAAA;IAAA;IAAA;IAAA;EAAA,QACH;AAEV;AAAC,GA/DeJ,SAAS;EAAA,QAENR,WAAW,EACbC,SAAS,EAGKK,OAAO;AAAA;AAAA,KANtBE,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}