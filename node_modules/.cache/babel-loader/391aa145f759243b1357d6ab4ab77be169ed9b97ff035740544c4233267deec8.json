{"ast":null,"code":"var _jsxFileName = \"/Users/mtrindade/Documents/Dev_Docs/Projetos/LetMeAsk_Project/src/App.tsx\",\n  _s = $RefreshSig$();\n//Autoimort: Identifica a importação do componente Home e faz de forma automática\n//contexto permite features como autenticação funcionarem em todas as páginas sem precisar repetir o código\nimport { useState } from 'react';\nimport { createContext } from 'react';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport { Home } from \"./pages/Home\";\nimport { NewRoom } from \"./pages/NewRoom\";\n//Importo firebase para implementar autenticação com google.\nimport { auth, firebase } from './services/firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n//Implementando contexto -> string valor inicial\nexport const AuthContext = /*#__PURE__*/createContext({});\nfunction App() {\n  _s();\n  const [user, setUser] = useState();\n  function signInWithGoogle() {\n    const provider = new firebase.auth.GoogleAuthProvider();\n\n    //signInwithPopup: Fazer autenticação direto com Poupup na tela, ao inves de redirecionar o cliente.\n    auth.signInWithPopup(provider).then(result => {\n      if (result.user) {\n        //Se foi resultado um usuario dessa autenticacao, then..\n        const {\n          displayName,\n          photoURL,\n          uid\n        } = result.user;\n\n        //Se o user nao tenha nome ou foto, a aplicacao nao vai funcionar\n        if (!displayName || !photoURL) {\n          throw new Error('Missing information from Google Account.');\n        }\n        setUser({\n          id: uid,\n          name: displayName,\n          avatar: photoURL\n        });\n      }\n    });\n  }\n\n  //Jogando signInWithGoogle a AuthContext, leva a autenticacao a todas as paginas --gracas a API de contexto!!!\n\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n      value: {\n        user,\n        signInWithGoogle\n      },\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/rooms/new\",\n          element: /*#__PURE__*/_jsxDEV(NewRoom, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 45\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n//Desta forma tudo que estiver dentro do provider vai conseguir enxergar o valor do contexto\n//Obs: Exact (valor true) diz que o endereço precisa ser exatamente \"/\", para que nao haja ruidos com outros enderecos comecando por \"/\", ou serao mostradas todas a paginas com / de uma so vez\n_s(App, \"kGLk6m4BT90iK1d91zRYm0C2usk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","createContext","BrowserRouter","Route","Routes","Home","NewRoom","auth","firebase","AuthContext","App","user","setUser","signInWithGoogle","provider","GoogleAuthProvider","signInWithPopup","then","result","displayName","photoURL","uid","Error","id","name","avatar"],"sources":["/Users/mtrindade/Documents/Dev_Docs/Projetos/LetMeAsk_Project/src/App.tsx"],"sourcesContent":["//Autoimort: Identifica a importação do componente Home e faz de forma automática\n//contexto permite features como autenticação funcionarem em todas as páginas sem precisar repetir o código\nimport {useState} from 'react'\nimport {createContext} from 'react'\nimport { BrowserRouter, Route, Routes, RouteProps } from 'react-router-dom';\nimport { Home } from \"./pages/Home\";\nimport { NewRoom } from \"./pages/NewRoom\";\n//Importo firebase para implementar autenticação com google.\nimport { auth, firebase } from './services/firebase'\n\ntype User = {\n  id: string;\n  name: string;\n  avatar: string;\n}\n\ntype AuthContextType = {\n  user: User | undefined; //No primeiro momento nao existe usuario logado, logo ele e undefined!\n  signInWithGoogle: () => void; //Funcao que nao tem parametros no () e tambem nao tem return dentro dela \n}\n\n//Implementando contexto -> string valor inicial\nexport const AuthContext = createContext({} as AuthContextType);\n\nfunction App() {\nconst [user, setUser] =  useState<User>();\n\nfunction signInWithGoogle() {\n  const provider = new firebase.auth.GoogleAuthProvider();\n  \n  //signInwithPopup: Fazer autenticação direto com Poupup na tela, ao inves de redirecionar o cliente.\n  auth.signInWithPopup(provider).then(result => {\n    if (result.user) { //Se foi resultado um usuario dessa autenticacao, then..\n      const {displayName, photoURL, uid} = result.user\n\n      //Se o user nao tenha nome ou foto, a aplicacao nao vai funcionar\n      if (!displayName || !photoURL) {\n        throw new Error('Missing information from Google Account.');\n      }\n\n      setUser({\n        id: uid,\n        name: displayName,\n        avatar:photoURL\n      })\n    }\n  })      \n}\n\n//Jogando signInWithGoogle a AuthContext, leva a autenticacao a todas as paginas --gracas a API de contexto!!!\n\n  return (\n    <BrowserRouter> \n      <AuthContext.Provider value={{ user, signInWithGoogle}}> \n        <Routes>\n          <Route path=\"/\" element={<Home/>} /> \n          <Route path=\"/rooms/new\" element={<NewRoom/>} />\n        </Routes>\n      </AuthContext.Provider>\n    </BrowserRouter>\n  );\n}\n//Desta forma tudo que estiver dentro do provider vai conseguir enxergar o valor do contexto\n//Obs: Exact (valor true) diz que o endereço precisa ser exatamente \"/\", para que nao haja ruidos com outros enderecos comecando por \"/\", ou serao mostradas todas a paginas com / de uma so vez\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA,SAAQA,QAAQ,QAAO,OAAO;AAC9B,SAAQC,aAAa,QAAO,OAAO;AACnC,SAASC,aAAa,EAAEC,KAAK,EAAEC,MAAM,QAAoB,kBAAkB;AAC3E,SAASC,IAAI,QAAQ,cAAc;AACnC,SAASC,OAAO,QAAQ,iBAAiB;AACzC;AACA,SAASC,IAAI,EAAEC,QAAQ,QAAQ,qBAAqB;AAAA;AAapD;AACA,OAAO,MAAMC,WAAW,gBAAGR,aAAa,CAAC,CAAC,CAAC,CAAoB;AAE/D,SAASS,GAAG,GAAG;EAAA;EACf,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAIZ,QAAQ,EAAQ;EAEzC,SAASa,gBAAgB,GAAG;IAC1B,MAAMC,QAAQ,GAAG,IAAIN,QAAQ,CAACD,IAAI,CAACQ,kBAAkB,EAAE;;IAEvD;IACAR,IAAI,CAACS,eAAe,CAACF,QAAQ,CAAC,CAACG,IAAI,CAACC,MAAM,IAAI;MAC5C,IAAIA,MAAM,CAACP,IAAI,EAAE;QAAE;QACjB,MAAM;UAACQ,WAAW;UAAEC,QAAQ;UAAEC;QAAG,CAAC,GAAGH,MAAM,CAACP,IAAI;;QAEhD;QACA,IAAI,CAACQ,WAAW,IAAI,CAACC,QAAQ,EAAE;UAC7B,MAAM,IAAIE,KAAK,CAAC,0CAA0C,CAAC;QAC7D;QAEAV,OAAO,CAAC;UACNW,EAAE,EAAEF,GAAG;UACPG,IAAI,EAAEL,WAAW;UACjBM,MAAM,EAACL;QACT,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ;;EAEA;;EAEE,oBACE,QAAC,aAAa;IAAA,uBACZ,QAAC,WAAW,CAAC,QAAQ;MAAC,KAAK,EAAE;QAAET,IAAI;QAAEE;MAAgB,CAAE;MAAA,uBACrD,QAAC,MAAM;QAAA,wBACL,QAAC,KAAK;UAAC,IAAI,EAAC,GAAG;UAAC,OAAO,eAAE,QAAC,IAAI;YAAA;YAAA;YAAA;UAAA;QAAG;UAAA;UAAA;UAAA;QAAA,QAAG,eACpC,QAAC,KAAK;UAAC,IAAI,EAAC,YAAY;UAAC,OAAO,eAAE,QAAC,OAAO;YAAA;YAAA;YAAA;UAAA;QAAG;UAAA;UAAA;UAAA;QAAA,QAAG;MAAA;QAAA;QAAA;QAAA;MAAA;IACzC;MAAA;MAAA;MAAA;IAAA;EACY;IAAA;IAAA;IAAA;EAAA,QACT;AAEpB;AACA;AACA;AAAA,GAvCSH,GAAG;AAAA,KAAHA,GAAG;AAyCZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}